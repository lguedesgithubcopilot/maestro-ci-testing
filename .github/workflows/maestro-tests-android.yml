name: Run Maestro UI Tests on Android

on: [push, pull_request]

env:
  MAESTRO_VERSION: 1.39.0

jobs:
  run_android_e2e:
    timeout-minutes: 30
    runs-on: macos-latest  # macOS-latest for Android emulator compatibility

    steps:
      # Step 1: Checkout the code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # Step 2: Install dependencies and Maestro CLI
      - name: Install dependencies and Maestro CLI
        run: |
          export MAESTRO_VERSION=1.39.0
          curl -Ls "https://get.maestro.mobile.dev" | bash
          arch -arm64 brew install jq

      # Step 3: Set up Java 17 (required for Android SDK)
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17  # Using Java 17 instead of 11

      # Step 4: Set up Android Emulator (API Level 29 as an example)
      - name: Set up Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          cores: 2
          ram-size: 2048M
          force-avd-creation: false
          emulator-boot-timeout: 600  # 10 minutes
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          pre-emulator-launch-script: |
            echo "Running pre-emulator launch script. Printing the working directory now:"
            pwd
          script: |
            # Ensure ADB server is running properly
            adb kill-server
            adb start-server

            npx envinfo                 # Check memory usage
            adb devices                 # Verify emulator is running

            # Install the Wikipedia APK on the emulator
            adb install wikipedia.apk   # Install the Wikipedia APK

            # Run Maestro E2E tests
            maestro --device android test android-flow.yaml
            # Replace "android-flow.yaml" with your actual flow file if needed

      # Step 5: Upload the test report and screenshots (if available)
      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: E2E Report (Android API 29, x86_64)
          path: |
            ${{ github.workspace }}/*.mp4
            ${{ github.workspace }}/*.png
            ${{ github.workspace }}/report*.xml
            ~/.maestro/tests/**/*
